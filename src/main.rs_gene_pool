mod ingest;
mod bracket;
mod pool;
use pool::Batch;
use rayon::prelude::*;
use core::num;
use rand::seq::SliceRandom;
use rand::Rng;

fn main() {
    
    let tournamentinfo = ingest::TournamentInfo::initialize();

    let num_generations = 1000;
    let mut mutation_rate = 1.0/63.0 * 5.0;
    let num_child_pools = 10;
    let batch_size = 500;
    let num_pool_entries = 3;
    let num_parents = 2;

    let mut premade_batches: Vec<Batch> = (0..100).into_par_iter().map(|_| pool::Batch::new(&tournamentinfo, batch_size)).collect();
    let mut rng = rand::thread_rng();
    let mut firstbatch = premade_batches.choose(&mut rng);

    //create an EvolvingPool of 10 brackets
    let mut pool_entries = pool::EvolvingPool::new(&tournamentinfo, num_pool_entries, mutation_rate, num_child_pools,batch_size);

    let mut pools: Vec<pool::EvolvingPool> = Vec::new();
    pools.push(pool_entries.clone());

    //begin scoring,mutating, and creating child pools
    for i in 0..num_generations{
        for j in 0..pools.len(){
            //score the pools in the vector
            pools[j].score(&tournamentinfo);
        }
        //sort the pools by their fitness
        pools.sort_by(|a, b| b.fitness.partial_cmp(&a.fitness).unwrap());
        //print the max score of the best pool
        println!("Generation: {}, Max Score: {:.2}, Average Score: {:.2}, Fitness: {:.2}", i, pools[0].max_score, pools[0].average_score, pools[0].fitness);

        //select parents 
        let mut future_parents: Vec<pool::EvolvingPool> = Vec::new();
        if pools.len() == 1{
            for j in 0..pools.len(){
                future_parents.push(pools[j].clone()); 
            }
        }
        else{
            for j in 0..num_parents{
                future_parents.push(pools[j].clone());
            }
        }

        //mutate the parents
        pools = Vec::new();
        let mut new_pools = Vec::new();
        for j in 0..future_parents.len(){
            new_pools = future_parents[j].create_child_pools(&tournamentinfo);
            for k in 0..new_pools.len(){
                pools.push(new_pools[k].clone());
            }
        }

        //moving average of the fitness over the last 10 generations
        // let mut fitness_tracker: Vec<f64> = Vec::new();
        // if i < 10{
        //     for j in 0..i{
        //         fitness_tracker.push(pools[0].fitness);
        //     }
        // }
        // else{
        //     for j in i-10..i{
        //         fitness_tracker.push(pools[0].fitness);
        //         fitness_tracker.remove(0);
        //     }
        // }
        // print!("Moving Average: {}, ", fitness_tracker.iter().sum::<f64>()/fitness_tracker.len() as f64);

        //update the batch of monte carlo simulations
        //////let new_batch = pool::Batch::new(&tournamentinfo, batch_size);
        let mut rng = rand::thread_rng();
        for j in 0..pools.len(){
            pools[j].batch = premade_batches.choose(&mut rng).unwrap().clone();
        }

        // //mutation rate scheduler
        // if i as f64 / num_generations as f64 > 0.25{
        //     mutation_rate = 1.0/63.0 * 2.5;
        // }
        // if i as f64 / num_generations as f64 > 0.50{
        //     mutation_rate = 1.0/63.0;  
        // }
        // if i as f64 / num_generations as f64 > 0.75{
        //     mutation_rate = 1.0/63.0 / 5.0;  
        // }

        mutation_rate = mutation_rate * ( 1.0 - (i as f64 / num_generations as f64));
    }

    //pick a winning pool
    pools.sort_by(|a, b| b.fitness.partial_cmp(&a.fitness).unwrap());
    pools.remove(0).pretty_print(&tournamentinfo);    
}

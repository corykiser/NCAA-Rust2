mod ingest;
mod bracket;
mod pool;
use rand::Rng;

fn main() {
    
    let tournamentinfo = ingest::TournamentInfo::initialize();

    let ref_bracket = bracket::Bracket::new(&tournamentinfo);

    let mut scores: Vec<f64> = Vec::new();

    let num_sims = 10000;

    //calculate the mean and standard deviation of the scores
    for i in 0..num_sims {
        let bracket = bracket::Bracket::new(&tournamentinfo);
        let temp_score = bracket.score(&ref_bracket);
        scores.push(temp_score);

        let mean = scores.iter().sum::<f64>() / scores.len() as f64;
        let std_dev = (scores.iter().map(|x| (x - mean).powi(2)).sum::<f64>() / scores.len() as f64).sqrt();
        
        if i % 100 == 0 {
            println!("{} {} {} {}", i, temp_score, mean, std_dev);
        }
    }

}
